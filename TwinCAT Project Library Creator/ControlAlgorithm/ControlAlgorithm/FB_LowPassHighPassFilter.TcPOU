<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LowPassHighPassFilter" Id="{815e3a69-b760-4f89-92f6-a49cb06ae46a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LowPassHighPassFilter
VAR_INPUT
    Enable       : BOOL;                                // Enable filter
    Input        : LREAL;                               // Input signal
    FilterType   : E_FilterType := E_FilterType.LowPass; // Filter type selection
    CutoffFreq   : LREAL := 1.0;                       // Cutoff frequency in Hz
    Reset        : BOOL;                                // Reset filter state
END_VAR

VAR_OUTPUT
    Output       : LREAL;                               // Filtered output
    Error        : BOOL;                                // Error flag
END_VAR

VAR
    OutputPrevious : LREAL := 0.0;                      // Previous output value
    InputPrevious  : LREAL := 0.0;                      // Previous input value (for high-pass)
    Alpha          : LREAL;                             // Filter coefficient
    CycleTime      : LREAL := 0.001;                    // Cycle time in seconds
    TaskIdx        : DINT;
    FirstScan      : BOOL := TRUE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF FirstScan THEN
    FirstScan := FALSE;
    TaskIdx := GETCURTASKINDEXEX();
    IF TaskIdx > 0 THEN
        // Convert from 100ns units to seconds
        CycleTime := TO_LREAL(TwinCAT_SystemInfoVarList._TaskInfo[TaskIdx].CycleTime) / 10000000.0;
    END_IF
END_IF

IF Enable THEN
    // Input validation
    IF CutoffFreq <= 0.0 OR CycleTime <= 0.0 THEN
        Error := TRUE;
        Output := Input;  // Pass through on error
        RETURN;
    END_IF
    
    // Reset filter if requested
    IF Reset THEN
        OutputPrevious := Input;
        InputPrevious := Input;
    END_IF
    
    // Calculate filter coefficient (alpha)
    // For first-order filter: alpha = dt / (RC + dt)
    // Where RC = 1 / (2 * pi * fc), fc = cutoff frequency
    Alpha := CycleTime / ((1.0 / (2.0 * Tc2_System.PI * CutoffFreq)) + CycleTime);
    
    // Limit alpha to prevent numerical issues
    IF Alpha > 1.0 THEN
        Alpha := 1.0;
    ELSIF Alpha < 0.0 THEN
        Alpha := 0.0;
    END_IF
    
    // Apply appropriate filter
    CASE FilterType OF
        E_FilterType.LowPass:
            // Low-pass filter: y[n] = α * x[n] + (1-α) * y[n-1]
            Output := Alpha * Input + (1.0 - Alpha) * OutputPrevious;
            
        E_FilterType.HighPass:
            // High-pass filter: y[n] = α * (y[n-1] + x[n] - x[n-1])
            Output := Alpha * (OutputPrevious + Input - InputPrevious);
            
        ELSE
            Error := TRUE;
            Output := Input;
            RETURN;
    END_CASE
    
    // Store values for next iteration
    OutputPrevious := Output;
    InputPrevious := Input;
    Error := FALSE;
    
ELSE
    // Filter disabled - pass through input
    Output := Input;
    OutputPrevious := Input;
    InputPrevious := Input;
    Error := FALSE;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>